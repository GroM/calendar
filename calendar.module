<?php

/**
 * @file
 * This is the Calendar module for calendar filtering and display in views.
 */

use Drupal\views\ViewExecutable;

define('CALENDAR_SHOW_ALL', 0);
define('CALENDAR_HIDE_ALL', -1);
define('CALENDAR_EMPTY_STRIPE', '#ffffff');

/**
 * Implements hook_preprocess_date_views_pager().
 *
 * Creates a calendar_links array which is stored in the session and used
 * in calendar_menu_local_tasks_alter() to display the links as action items.
 * The links can be altered or deleted using hook_calendar_links_alter().
 *
 */
function calendar_preprocess_date_views_pager(&$vars) {
  $view = $vars['plugin']->view;

  // If no one has added date information, nothing to do here.
  if (empty($view->date_info) || empty($view->argument)) {
    return;
  }

  // If we're not on a view with a path (a page), no links are needed.
  $current_path = !empty($view->display_handler->options['path']) ? $view->display_handler->options['path'] : '';
  if (empty($current_path)) {
    return;
  }

  // If this display has been set up as a default tab, the current path
  // is actually the base path, i.e. if the path is 'calendar/month'
  // and this is a default tab, the path for this display will actually
  // be 'calendar'.
  if ($view->display_handler->options['menu']['type'] == 'default tab') {
    $parts = explode('/', $current_path);
    array_pop($parts);
    $current_path = implode('/', $parts);
  }

  // If an 'Add new ... link is provided, add it here.
  if (!empty($view->date_info->calendar_date_link) && !empty($view->date_info->url)
  && (\Drupal::currentUser()->hasPermission("administer nodes") || \Drupal::currentUser()->hasPermission('create ' . $view->date_info->calendar_date_link . ' content'))) {
    $name = node_type_get_name($view->date_info->calendar_date_link);
    $href = 'node/add/' . str_replace('_', '-', $view->date_info->calendar_date_link);
    $calendar_links[$current_path]['actions'][] = array('title' => t('Add @name', array('@name' => $name)), 'path' => $href);
  }

  // Pass this through drupal_alter() so it can be adjusted in custom code or in the theme.
  \Drupal::moduleHandler()->alter('calendar_links', $calendar_links);

  // Add the value to the session so it can be used to create the action links.
  if (!empty($calendar_links[$current_path])) {
    $_SESSION['calendar_links'][$current_path] = $calendar_links[$current_path];
  }
}

/**
 * Implements hook_date_default_argument_alter().
 *
 * Adjust the default date for a view based on the stored session value.
 */
function calendar_date_default_argument_alter(&$argument, &$value) {
  $user = \Drupal::currentUser();
  $style_options = $argument->view->display_handler->get_option('style_options');
  $tracking = \Drupal::config('calendar.settings')->get('calendar_track_date');
  if (!empty($tracking) && ($tracking == 2 || !empty($user->uid))) {

    // If this is a default date, i.e. we are visiting a new calendar display,
    // set the default date for the display. See if we already have a session
    // date to use. If so, use it. Otherwise the default is the current date.
    if (!empty($_SESSION[$argument->view->name]['default_date'])) {
      $default_date = $_SESSION[$argument->view->name]['default_date'];
    }
    else {
      $default_date = date_now();
      $_SESSION[$argument->view->name]['default_date'] = $default_date;
    }
    // Get the current date from the session.
    $value = $default_date->format($argument->arg_format);
  }
}

/**
 * Implements hook_views_pre_render().
 *
 * Track the current date as the user moves from calendar display to calendar display.
 */
function calendar_views_pre_render(ViewExecutable $view) {
  $user = \Drupal::currentUser();

  $tracking = \Drupal::config('calendar.settings')->get('calendar_track_date');
  if (!empty($tracking) && ($tracking == 2 || !empty($user->uid))) {
    foreach ($view->argument as $id => &$argument) {

      // If this is not a default date, i.e. we have browsed to a new calendar
      // period on a display we were already on, store the midpoint of the current
      // view as the current date in a session.
      if (date_views_handler_is_date($argument, 'argument') && empty($argument->is_default)) {
        $date_range = $argument->date_handler->arg_range($argument->argument);
        $session_date = $date_range[0];
        $days = intval(($date_range[1]->format('U') - $date_range[0]->format('U')) / 3600 / 24 / 2);
        date_modify($session_date, "+$days days");
        $_SESSION[$view->name]['default_date'] = $session_date;
      }
    }
  }
}

/**
 * Implements hook_menu_local_tasks_alter().
 *
 * Takes the calendar links created in calendar_preprocess_date_views_pager()
 * and reconfigures them as action items. The links can be altered
 * before they are displayed using hook_calendar_links_alter().
 */
function calendar_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  if (!empty($_SESSION['calendar_links']) && array_key_exists($root_path, $_SESSION['calendar_links'])) {
    $calendar_data = $_SESSION['calendar_links'][$root_path];
    if (!empty($calendar_data['actions'])) {
      foreach ($calendar_data['actions'] as $action) {
        // @FIXME
// menu_get_item() has been removed. To retrieve route information, use the
// RouteMatch object, which you can retrieve by calling \Drupal::routeMatch().
// 
// 
// @see https://www.drupal.org/node/2203305
// $item = menu_get_item($action['path']);

        $item['title'] = $action['title'];
        // The add new content page would redirect to the new event
        // if we did not override that here. This way they will
        // redirect back to the calendar.
	if (!isset($item['localized_options'])) {
          $item['localized_options'] = array();
        }
        $item['localized_options'] += array('query' => array());
        $item['localized_options']['query'] += drupal_get_destination();
        if (array_key_exists('access', $item) && $item['access']) {
          $data['actions']['output'][] = array(
            '#theme' => 'menu_local_action',
            '#link' => $item,
          );
        }
      }
    }
  }
  return;
}

/**
 * Implements hook_views_api().
 */
function calendar_views_api() {
  return array(
    'api' => 3.0,
    'path' => drupal_get_path('module', 'calendar') . '/includes',
  );
}

/**
 * Calendar display types.
 */
function calendar_display_types() {
  return array('year' => t('Year'), 'month' => t('Month'), 'day' => t('Day'), 'week' => t('Week'));
}

/**
 * Implementation of hook_help().
 */
function calendar_help($section, $arg) {
  switch ($section) {
    case 'admin/help#calendar':
      return t("<p>View complete documentation at !link.</p>", array('!link' => \Drupal::l(t('Date and Calendar Documentation'), \Drupal\Core\Url::fromUri('http://drupal.org/node/262062'))));
  }
}

/**
 * Implements hook_theme().
 */
function calendar_theme() {
  $module_path = drupal_get_path('module', 'calendar');

  $base = array(
    'file' => 'theme.inc',
    'path' => "$module_path/theme",
  );
  return [
    'calendar_mini' => [
      'variables' => ['view' => NULL, 'options' => [], 'rows' => []],
    ],
    'calendar_month_multiple_entity' => [
      'variables' => ['curday' => NULL, 'count' => NULL, 'view' => NULL, 'ids' => NULL],
    ],
    'calendar_datebox' => [
      'variables' => ['date' => NULL, 'view' => NULL, 'items' => NULL, 'selected' => NULL],
      'file' => 'calendar.theme.inc',
    ],
    'calendar_empty_day' => [
      'variables' => ['curday' => NULL, 'view' => NULL],
    ],
    'calendar_item' => $base + array(
      'template' => 'calendar-item',
      'variables' => array('view' => NULL, 'rendered_fields' => NULL, 'item' => NULL),
      ),
    'calendar_stripe_legend' => $base + array(
      'variables' => array('view' => NULL),
      ),
    'calendar_stripe_stripe' => $base + array(
      'variables' => array('node' => NULL),
      ),
    'calendar_time_row_heading' => $base + array(
      'variables' => array('start_time' => NULL, 'next_start_time' => NULL, 'curday_date' => NULL),
      ),
    'calendar_month_col' => $base + array(
      'template' => 'calendar-month-col',
      'variables' => array('item' => NULL),
      ),
    'calendar_month_row' => $base + array(
      'template' => 'calendar-month-row',
      'variables' => array('inner' => NULL, 'class' => NULL, 'iehint' => NULL),
      ),
  ];
}

/**
 * Implements hook_node_view().
 *
 * Add link to calendar to nodes, formerly hook_link().
 * Controlled by value of 'calendar_date_link' in the view.
 */
function calendar_node_view($node, $view_mode, $langcode) {
  // @FIXME
// // @FIXME
// // The correct configuration object could not be determined. You'll need to
// // rewrite this call manually.
// $path = variable_get('calendar_date_link_' . $node->type);

  if (!empty($path)) {
    $links['calendar_link'] = array(
      'title' => t('Calendar'),
      'href' => $path,
      'attributes' => array('title' => t('View the calendar.')),
    );
    $node->content['links']['calendar'] = array(
      '#theme' => 'links__node__caledar',
      '#links' => $links,
      '#attributes' => array('class' => array('links', 'inline')),
    );
  }
}

/**
 * Helper function to link an entity type to a calendar.
 *
 * @param $entity_type - the type of entity.
 * @param $bundle - the entity bundle name.
 * @param $path - the calendar path to use for this bundle.
 */
function calendar_set_link($entity_type, $bundle, $path) {
  switch ($entity_type) {
    case 'node':
      // @FIXME
// // @FIXME
// // The correct configuration object could not be determined. You'll need to
// // rewrite this call manually.
// variable_set('calendar_date_link_' . $bundle, $path);

      break;
    default:
      // @FIXME
// // @FIXME
// // The correct configuration object could not be determined. You'll need to
// // rewrite this call manually.
// variable_set('calendar_date_link_' . $entity_type . '_' . $bundle, $path);

      break;
  }
}

/**
 * Helper function to clear previously-set links to calendars.
 *
 * @param $bundle, Clear all links for this bundle. If NULL, clear all links.
 */
function calendar_clear_link_bundle($bundle = NULL) {
  if (empty($bundle)) {
    // @FIXME
// $result = db_select('variable', 'v')
//       ->fields('v', 'name')
//       ->condition('name', 'calendar_date_link_%', 'LIKE')
//       ->execute()->fetchAll(PDO::FETCH_ASSOC);

  }
  else {
    // @FIXME
// $result = db_select('variable', 'v')
//       ->fields('v', 'name')
//       ->condition('name', 'calendar_date_link_' . $bundle)
//       ->execute()->fetchAll(PDO::FETCH_ASSOC);

  }
  // Iterate over all the values and delete them.
  foreach ($result as $row) {
    // @FIXME
// // @FIXME
// // The correct configuration object could not be determined. You'll need to
// // rewrite this call manually.
// variable_del($row['name']);

  }
}

/**
 * Helper function to clear previously-set links to calendars.
 *
 * @param $path, Clear all links to this path. If NULL, clear all links.
 */
function calendar_clear_link_path($path = NULL) {
  // @FIXME
// $result = db_select('variable', 'v')
//     ->fields('v', array('name', 'value'))
//     ->condition('name', 'calendar_date_link_%', 'LIKE')
//     ->execute()->fetchAll(PDO::FETCH_ASSOC);

  // Iterate over all the values and delete them.
  foreach ($result as $row) {
    if (empty($path) || unserialize($row['value']) == $path) {
      // @FIXME
// // @FIXME
// // The correct configuration object could not be determined. You'll need to
// // rewrite this call manually.
// variable_del($row['name']);

    }
  }
  if (isset($_SESSION['calendar_links'][$path]['actions'])) {
    unset($_SESSION['calendar_links'][$path]['actions']);
    if (empty($_SESSION['calendar_links'][$path])) {
      unset($_SESSION['calendar_links'][$path]);
    }
  }
}

/**
 * Default settings array for calendar time grouping.
 */
function calendar_groupby_times($type = '') {
  $times = array();
  switch ($type) {
    case 'hour':
      for ($i = 0; $i <= 23; $i++) {
        $times[] = \Drupal\Component\Datetime\DateTimePlus::datePad($i) . ':00:00';
      }
      break;
    case 'half':
      for ($i = 0; $i <= 23; $i++) {
        $times[] = \Drupal\Component\Datetime\DateTimePlus::datePad($i) . ':00:00';
        $times[] = \Drupal\Component\Datetime\DateTimePlus::datePad($i) . ':30:00';
      }
      break;
    default:
      break;
  }
  return $times;
}

function calendar_list_views() {
  $calendar_views = array();
  $views = views_get_enabled_views();
  foreach ($views as $view) {
    $displays = array();
    $view->init_display();   // Make sure all the handlers are set up
    foreach ($view->display as $display_id => $display) {
      if ($display_id != 'default' && !empty($display->display_options['style_plugin']) && $display->display_options['style_plugin'] == 'calendar_style') {
        $index = $view->name . ':' . $display_id;
        $calendar_views[$index] = ucfirst($view->name) . ' ' . strtolower($view->display[$display_id]->display_title) . ' [' . $view->name . ':' . $display_id . ']';
      }
    }
  }
  return $calendar_views;
}

/**
 *  Implementation of hook_block_info()
 */
function calendar_block_info() {
  $blocks['calendar_legend'] = array(
    'info' => t('Calendar Legend'),
  );
  return $blocks;
}

/**
 * Implementation of hook_block_configure().
 */
function calendar_block_configure($delta = '') {
  switch ($delta) {
    case 'calendar_legend':
    $options = calendar_list_views();
    // @FIXME
// // @FIXME
// // The correct configuration object could not be determined. You'll need to
// // rewrite this call manually.
// $form['calendar_legend_view'] = array(
//       '#type' => 'select',
//       '#title' => t('Legend View'),
//       '#description' => t('Choose the view display that contains the settings for the stripes that should be displayed in a legend in this block. Note that if you change the stripe values in that view you will need to clear the cache to pick up the new values in this block.'),
//       '#default_value' => variable_get('calendar_legend_view_' . $delta, ''),
//       '#options' => $options,
//     );

    return $form;
  }
}

/**
 * Implementation of hook_block_save().
 */
function calendar_block_save($delta, $edit = array()) {
  if ($delta == 'calendar_legend') {
    // @FIXME
// // @FIXME
// // The correct configuration object could not be determined. You'll need to
// // rewrite this call manually.
// variable_set('calendar_legend_view_' . $delta, $edit['calendar_legend_view']);

    drupal_set_message(t('The view for the calendar legend has been set.'));
  }
}

/**
 *  Implementation of hook_block_view().
 */
function calendar_block_view($delta = '') {
  switch ($delta) {
    case 'calendar_legend':
      // Create the content before returning the block
      // so empty content won't still create the block.
      // @FIXME
// // @FIXME
// // The correct configuration object could not be determined. You'll need to
// // rewrite this call manually.
// $view = variable_get('calendar_legend_view_' . $delta, '');

      // @FIXME
// theme() has been renamed to _theme() and should NEVER be called directly.
// Calling _theme() directly can alter the expected output and potentially
// introduce security issues (see https://www.drupal.org/node/2195739). You
// should use renderable arrays instead.
// 
// 
// @see https://www.drupal.org/node/2195739
// $content = theme('calendar_stripe_legend', array('view' => $view));

      $block['subject'] = t('Calendar Legend');
      $block['content'] = $content;
      return $block;
  }
}

/**
 * Find the path for the calendar display that has a specific granularity.
 */
function calendar_granularity_path(ViewExecutable &$view, $granularity) {
  // @todo Find out what should happen here.
  return;
  $paths = &drupal_static(__FUNCTION__, array());
  if (!array_key_exists($view->name, $paths) || !(array_key_exists($granularity, $paths[$view->name]))) {
    $paths[$view->name][$granularity] = '';
    foreach ($view->display as $id => $display) {
      // Check for !empty() in case the view is not fully formed or has displays that are marked to be deleted
      if (!empty($display->deleted) || empty($display->display_options['style_plugin']) || (isset($display->display_options['enabled']) && $display->display_options['enabled'] == FALSE)) {
        continue;
      }

      if ($display->display_plugin != 'feed' && !empty($display->display_options['path']) && !empty($display->display_options['arguments'])) {

        // Set to the default value, reset below if another value is found.
        $type = 'month';
        foreach ($display->display_options['arguments'] as $name => $argument) {
          if (!empty($argument['granularity'])) {
            $type = $argument['granularity'];
          }
        }

        if ($type == $granularity) {
          $part_path =  $display->display_options['path'];
          $parts = explode('/', $part_path);
          if (in_array('%', $parts)) {
            $current_path = parse_url($_GET['q']);
            $current_parts = explode('/', $current_path['path']);
            foreach ($parts as $key => $part) {
              if ($part == '%' && !empty($current_parts[$key])) {
                $parts[$key] = $current_parts[$key];
              }
            }
            $part_path = implode('/', $parts);
          }
          $paths[$view->name][$granularity] = $part_path;
        }
      }
    }
  }
  return $paths[$view->name][$granularity];
}

/**
 *  Check to make sure the user has entered a valid 6 digit hex color.
 */
function calendar_validate_hex_color($element, &$form_state) {
  if (!$element['#required'] && empty($element['#value'])) {
    return;
  }
  if (!preg_match('/^#(?:(?:[a-f\d]{3}){1,2})$/i', $element['#value'])) {
    form_error($element, t("'@color' is not a valid hex color", array('@color' => $element['#value'])));
  }
  else {
    $form_state->setValueForElement($element, $element['#value']);
  }
}

/**
 * @deprecated Find the right d8 alternative.
 *
 * The calendar week number for a date.
 *
 * PHP week functions return the ISO week, not the calendar week.
 *
 * @param string $date
 *   A date string in the format Y-m-d.
 *
 * @return int
 *   The calendar week number.
 */
function date_week($date) {
  $date = substr($date, 0, 10);
  $parts = explode('-', $date);

  $timezone = new DateTimeZone('UTC');
  $date = new DateTime($date . ' 12:00:00', $timezone);

  $year_date = new DateTime($parts[0] . '-01-01 12:00:00', $timezone);
  $week = intval($date->format('W'));
  $year_week = intval(date_format($year_date, 'W'));
  $date_year = intval($date->format('o'));

  // Remove the leap week if it's present.
  if ($date_year > intval($parts[0])) {
    $last_date = clone($date);
    date_modify($last_date, '-7 days');
    $week = date_format($last_date, 'W') + 1;
  }
  elseif ($date_year < intval($parts[0])) {
    $week = 0;
  }

  if ($year_week != 1) {
    $week++;
  }

  // Convert to ISO-8601 day number, to match weeks calculated above.
  $iso_first_day = 0;

  // If it's before the starting day, it's the previous week.
  if (intval($date->format('N')) < $iso_first_day) {
    $week--;
  }

  // If the year starts before, it's an extra week at the beginning.
  if (intval(date_format($year_date, 'N')) < $iso_first_day) {
    $week++;
  }

  return $week;
}

/**
 * @deprecated Find the right d8 alternative.
 *
 * The instanceof function makes this work for any handler that was derived
 * from 'views_handler_filter_date' or 'views_handler_argument_date',
 * which includes core date fields like the node updated field.
 *
 * The test for $handler->min_date tells us that this is an argument that
 * not only is derived from the views date handler but also has been processed
 * by the Date Views filter or argument code.
 */
function date_views_handler_is_date($handler, $type = 'argument') {
  switch ($type) {
    case 'filter':
      return $handler instanceof \Drupal\views\Plugin\views\filter\Date && !empty($handler->min_date);
    case 'argument':
      return $handler instanceof \Drupal\views\Plugin\views\argument\Date;
  }
  return FALSE;
}
